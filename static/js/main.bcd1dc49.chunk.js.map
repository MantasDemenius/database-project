{"version":3,"sources":["components/includes/Header.js","components/pages/ContentItem.js","components/pages/Imones.js","components/pages/Index.js","components/includes/Content.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Link","to","ContentItem","Fragment","this","props","item","title","Component","Imones","state","imones","id","map","record","pages_ContentItem","key","Index","Content","Route","exact","path","component","App","users","getUsers","_","axios","get","then","response","_this","setState","data","results","catch","error","console","log","showUsers","_ref","id_KLIENTAS","Vardas","includes_Header","includes_Content","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bcd1dc49.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n\r\nfunction Header() {\r\n    return (\r\n      <header>\r\n        <div className=\"header\">\r\n          <h1>\r\n            <Link to=\"/\"><p className=\"header-logo\">Duomenų bazių antrasis laboratorinis darbas</p></Link>\r\n          </h1>\r\n          <nav>\r\n            <div className=\"navigation-container\">\r\n              <ul className=\"top-nav\">\r\n                <li><Link to=\"/imones\">Imonės</Link></li>\r\n                <li><Link to=\"/restoranai\">Restoranai</Link></li>\r\n                <li><Link to=\"/darbuotojai\">Darbuotojai</Link></li>\r\n                <li><Link to=\"/tiekejai\">Tiekėjai</Link></li>\r\n                <li><Link to=\"/atsiliepimai\">Atsiliepimai</Link></li>\r\n                <li><Link to=\"/klientai\">Klientai</Link></li>\r\n                <li><Link to=\"/uzsakymai\">Užsakymai</Link></li>\r\n              </ul>\r\n            </div>\r\n          </nav>\r\n        </div>\r\n      </header>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\n\r\n\r\n\r\nclass ContentItem extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <p>{this.props.item.title}</p>\r\n      </React.Fragment>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContentItem;\r\n","import React, { Component } from 'react';\r\nimport ContentItem from './ContentItem';\r\n\r\nclass Imones extends Component {\r\n\r\nstate = {\r\n  imones:\r\n  [\r\n    {\r\n      id: 1,\r\n      title: \"sijonai\"\r\n    },\r\n    {\r\n      id: 2,\r\n      title: \"balvonai\"\r\n    },\r\n    {\r\n      id: 3,\r\n      title: \"klijai\"\r\n    },\r\n    {\r\n      id: 4,\r\n      title: \"kelnes\"\r\n    }\r\n  ]\r\n}\r\n\r\n\r\n  render() {\r\n    return  this.state.imones.map((record) => (\r\n      <div className=\"content-item\">\r\n        <ContentItem key={record.id} item={record}/>\r\n      </div>\r\n\r\n    ));\r\n  }\r\n}\r\n\r\nexport default Imones;\r\n","import React from 'react';\r\n\r\nfunction Index() {\r\n    return (\r\n      <div >\r\n        <h1>Index</h1>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Index;\r\n","import React, { Component } from 'react';\r\nimport { Route } from 'react-router';\r\n\r\nimport Imones from '../pages/Imones';\r\nimport Index from '../pages/Index';\r\n\r\nclass Content extends Component {\r\n\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"content\">\r\n          <Route exact path='/' component={Index}></Route>\r\n          <Route path='/imones' component={Imones}></Route>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Content;\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport './style/style.css';\r\n\r\nimport Header from './components/includes/Header';\r\nimport Content from './components/includes/Content';\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    users:[]\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.getUsers();\r\n  }\r\n\r\n  getUsers = _ => {\r\n    axios.get('/clients')\r\n    .then(response => {\r\n      this.setState({users: response.data.results});\r\n    })\r\n    // .then(({response}) => this.setState({users: response.users}))\r\n    .catch(error => console.log(error));\r\n    // fetch('http://localhost:4000/clients')\r\n    // .then(response => response.json())\r\n    // .then(response => this.setState({ users: response.data}))\r\n    // //.then(({response}) => this.setState({users: response.data }))\r\n    // .catch(error => console.log(error))\r\n  }\r\n\r\n  showUsers = ({ id_KLIENTAS, Vardas}) => <div key={id_KLIENTAS}>{Vardas}</div>\r\n\r\n  render() {\r\n    const { users } = this.state;\r\n    return (\r\n      <div className=\"App\">\r\n        <Header />\r\n        <Content />\r\n        {users.map(this.showUsers)}\r\n\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n\n   document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}